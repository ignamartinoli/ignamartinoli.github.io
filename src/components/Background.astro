---
export interface Props {
	enableMouseInteraction?: boolean;
}

const { enableMouseInteraction = true } = Astro.props;
---

<div class="glassmorphic-background">
	<div class="gradient-orb orb-1"></div>
	<div class="gradient-orb orb-2"></div>
	<div class="gradient-orb orb-3"></div>

	<div class="shape-container shape-triangle">
		<div class="floating-shape"></div>
	</div>
	<div class="shape-container shape-square">
		<div class="floating-shape"></div>
	</div>
	<div class="shape-container shape-pill">
		<div class="floating-shape"></div>
	</div>
	<div class="shape-container shape-circle">
		<div class="floating-shape"></div>
	</div>
</div>

<style>
	.glassmorphic-background {
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100vh;
		z-index: -1;
		background: linear-gradient(135deg, var(--base), var(--mantle), var(--crust));
		overflow: hidden;
	}

	.gradient-orb {
		position: absolute;
		border-radius: 50%;
		filter: blur(80px);
		opacity: 0.25;
		animation: floatOrb 25s infinite ease-in-out;
	}

	.orb-1 {
		width: 450px;
		height: 450px;
		background: radial-gradient(circle, var(--mauve), var(--pink));
		top: -200px;
		left: -200px;
		animation-delay: 0s;
	}

	.orb-2 {
		width: 350px;
		height: 350px;
		background: radial-gradient(circle, var(--blue), var(--sapphire));
		top: 50%;
		right: -150px;
		animation-delay: -8s;
	}

	.orb-3 {
		width: 500px;
		height: 500px;
		background: radial-gradient(circle, var(--teal), var(--green));
		bottom: -250px;
		left: 20%;
		animation-delay: -15s;
	}

	.shape-container {
		position: absolute;
		animation: floatShape 30s infinite ease-in-out;
	}

	.floating-shape {
		width: 100%;
		height: 100%;
		backdrop-filter: blur(12px);
		background: rgba(255, 255, 255, 0.05);
		border: 1px solid rgba(255, 255, 255, 0.1);
		transition: transform 0.4s ease-out;
	}

	.shape-triangle {
		width: 80px;
		height: 80px;
		top: 20%;
		left: 15%;
		animation-delay: -3s;
	}
	.shape-triangle .floating-shape {
		clip-path: polygon(50% 0%, 0% 100%, 100% 100%);
	}

	.shape-square {
		width: 70px;
		height: 70px;
		top: 40%;
		left: 80%;
		animation-delay: -12s;
	}
	.shape-square .floating-shape {
		transform: rotate(45deg);
		border-radius: 10px;
	}

	.shape-pill {
		width: 120px;
		height: 60px;
		top: 65%;
		right: 15%;
		animation-delay: -8s;
	}
	.shape-pill .floating-shape {
		border-radius: 50px;
	}

	.shape-circle {
		width: 90px;
		height: 90px;
		bottom: 15%;
		left: 10%;
		animation-delay: -20s;
	}
	.shape-circle .floating-shape {
		border-radius: 50%;
	}

	@keyframes floatOrb {
		0%, 100% { transform: translateY(0); }
		50% { transform: translateY(-40px); }
	}

	@keyframes floatShape {
		0%, 100% { transform: translateY(0) translateX(0) rotate(0deg); }
		25% { transform: translateY(-20px) translateX(30px) rotate(45deg); }
		50% { transform: translateY(-40px) translateX(0) rotate(90deg); }
		75% { transform: translateY(-20px) translateX(-30px) rotate(135deg); }
	}
</style>

<script define:vars={{ enableMouseInteraction }}>
	function initBackgroundInteraction() {
		if (!enableMouseInteraction) return;

		const shapeContainers = document.querySelectorAll('.shape-container');
		const pushStrength = 50;
		const interactionRadius = 150;

		const onMouseMove = (event) => {
			const mouseX = event.clientX;
			const mouseY = event.clientY;

			shapeContainers.forEach(container => {
				const shape = container.querySelector('.floating-shape');
				if (!shape) return;

				const rect = container.getBoundingClientRect();
				const shapeX = rect.left + rect.width / 2;
				const shapeY = rect.top + rect.height / 2;

				const distanceX = mouseX - shapeX;
				const distanceY = mouseY - shapeY;
				const distance = Math.sqrt(distanceX * distanceX + distanceY * distanceY);

				if (distance < interactionRadius) {
					const angle = Math.atan2(distanceY, distanceX);
					const pushFactor = (1 - distance / interactionRadius) * pushStrength;
					const pushX = -Math.cos(angle) * pushFactor;
					const pushY = -Math.sin(angle) * pushFactor;
					
					shape.style.transform = `translate(${pushX}px, ${pushY}px)`;
				} else {
					shape.style.transform = '';
				}
			});
		};

		document.addEventListener('mousemove', onMouseMove);
	}

	document.addEventListener('astro:page-load', initBackgroundInteraction);
	initBackgroundInteraction();
</script>
